{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines: Mobile Sales Acquisition Tool\n\n## Design Approach\n**Utility-First Mobile Application** - Inspired by professional mobile scanning apps (CamScanner, Adobe Scan) optimized for one-handed operation and quick data capture in field conditions.\n\n## Color System\n\n### Core Palette\n- **Primary**: `207 100% 40%` (Professional Blue #0066CC) - Main actions, headers\n- **Success**: `134 61% 41%` (Green #28A745) - Positive indicators, existing customers\n- **Warning**: `45 100% 51%` (Yellow #FFC107) - Attention states, prospects\n- **Background**: `210 17% 98%` (Light Grey #F8F9FA) - App background\n- **Text Primary**: `210 11% 15%` (Dark Grey #212529) - Main content\n- **Border**: `210 14% 89%` (Light Border #DEE2E6) - Dividers, card borders\n\n### Dark Mode (Optional Enhancement)\n- Background: `210 11% 15%`\n- Cards: `210 10% 20%`\n- Text: `210 17% 98%`\n\n## Typography\n- **Primary Font**: SF Pro Display (iOS) / Inter (fallback)\n- **Display**: 24px bold for screen titles\n- **Body**: 16px regular for content, 14px for labels\n- **Small**: 12px for metadata and captions\n- **Line Height**: 1.5 for readability on mobile\n\n## Layout System\n\n### Spacing Scale\nUse Tailwind units: **2, 4, 8, 16** (corresponding to p-2, p-4, p-8, p-16)\n- Standard padding: `p-4` (16px) throughout app\n- Card spacing: `space-y-4` between elements\n- Section gaps: `gap-8` for major sections\n- Touch target minimum: 44px (h-11 or larger)\n\n### Mobile-First Grid\n- Single-column layout for all content\n- Full-width cards with rounded corners (`rounded-lg`)\n- Sticky bottom action bar for primary CTAs\n- Safe area padding for iOS notch/home indicator\n\n## Component Library\n\n### Camera Interface\n- Full-screen camera view with overlay guidelines\n- Floating capture button (80px diameter, centered bottom)\n- Image preview thumbnail after capture\n- Retake/Confirm actions clearly visible\n\n### Address Form\n- Large input fields (min 44px height)\n- GPS indicator icon with loading state\n- Individual fields: Street, Number, City, Postal Code, Country\n- Manual edit button always visible\n- Auto-fill with smooth animation\n\n### Results Display Cards\n- White background cards on grey app background\n- 16px padding inside cards\n- Clear section headers (14px bold)\n- Name list items with customer status badges\n- Color-coded status: Green (existing), Yellow (prospect)\n\n### Action Buttons\n- Primary button: Blue background, white text, 48px height\n- Secondary button: Outline style with blue border\n- Icon buttons: 44px touch target minimum\n- Sticky footer positioning for main actions\n\n### Language Toggle\n- Flag icons or text labels (DE/EN)\n- Fixed position (top-right corner)\n- Simple toggle interaction\n\n## Navigation & Flow\n- Single-screen interface with collapsible sections\n- Smooth scroll to sections (GPS → Photo → Results)\n- Clear visual hierarchy with section dividers\n- Back/Reset actions in top navigation bar\n\n## Interaction Patterns\n- Large touch targets optimized for thumbs\n- Instant visual feedback on all taps\n- Loading states with spinners for API calls\n- Success/error toast notifications at top\n- Swipe gestures for image gallery (if multiple photos)\n\n## Animations\n- Minimal, purposeful animations only:\n  - GPS location pulse indicator\n  - Loading spinners for API calls\n  - Smooth expand/collapse for sections\n  - No decorative animations to maintain performance\n\n## Images\n**No hero images** - This is a utility app, not a marketing page. Focus on functional UI elements, camera viewfinder, and clear data display.\n\n## Mobile Optimization\n- Optimized for iOS Safari and Chrome mobile\n- Touch-friendly spacing throughout\n- Portrait orientation primary, landscape secondary\n- Fast load times for field use\n- Offline-capable loading states\n\n## Accessibility\n- WCAG AA contrast ratios minimum\n- Clear focus states for keyboard navigation\n- Icon buttons paired with text labels\n- Language-appropriate text direction (LTR)","size_bytes":3920},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        success: \"hsl(134 61% 41% / <alpha-value>)\",\n        warning: \"hsl(45 100% 51% / <alpha-value>)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4156},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport multer from \"multer\";\nimport vision from \"@google-cloud/vision\";\nimport { \n  geocodingRequestSchema, \n  addressSchema, \n  ocrCorrectionRequestSchema,\n  type Address,\n  type Customer,\n  type OCRResponse\n} from \"@shared/schema\";\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\n// Initialize Vision client once at startup\nlet visionClient: any = null;\nlet visionEnabled = false;\n\ntry {\n  const visionKey = process.env.GOOGLE_CLOUD_VISION_KEY || '{}';\n  \n  // Check if it's a valid JSON (service account key)\n  if (visionKey.startsWith('{')) {\n    const credentials = JSON.parse(visionKey);\n    \n    // Validate that it's a proper service account key with required fields\n    if (!credentials.client_email || !credentials.private_key) {\n      console.warn('GOOGLE_CLOUD_VISION_KEY does not contain valid service account credentials (missing client_email or private_key). OCR disabled.');\n      console.warn('To enable OCR, provide a complete JSON service account key with Vision API access.');\n    } else {\n      visionClient = new vision.ImageAnnotatorClient({ credentials });\n      visionEnabled = true;\n      console.log('Google Cloud Vision API initialized successfully');\n    }\n  } else {\n    console.warn('GOOGLE_CLOUD_VISION_KEY is not a valid JSON service account key. OCR disabled.');\n    console.warn('To enable OCR, provide a JSON service account key with Vision API access.');\n  }\n} catch (error) {\n  console.error('Failed to initialize Google Cloud Vision client:', error);\n  console.warn('OCR functionality disabled.');\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  app.post(\"/api/geocode\", async (req, res) => {\n    try {\n      const { latitude, longitude } = geocodingRequestSchema.parse(req.body);\n      \n      const apiKey = process.env.GOOGLE_GEOCODING_API_KEY;\n      if (!apiKey) {\n        return res.status(500).json({ error: \"Geocoding API key not configured\" });\n      }\n\n      const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${apiKey}&language=de`;\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (data.status !== \"OK\" || !data.results || data.results.length === 0) {\n        return res.status(400).json({ error: \"Unable to geocode location\" });\n      }\n\n      const result = data.results[0];\n      const components = result.address_components;\n\n      const getComponent = (types: string[]) => {\n        const component = components.find((c: any) => \n          types.some(type => c.types.includes(type))\n        );\n        return component?.long_name || \"\";\n      };\n\n      const address: Address = {\n        street: getComponent([\"route\"]),\n        number: getComponent([\"street_number\"]),\n        city: getComponent([\"locality\", \"postal_town\"]),\n        postal: getComponent([\"postal_code\"]),\n        country: getComponent([\"country\"])\n      };\n\n      // Validate that the address is in Germany\n      if (address.country) {\n        const countryLower = address.country.toLowerCase();\n        if (countryLower !== 'deutschland' && countryLower !== 'germany') {\n          return res.status(400).json({ \n            error: \"This service is only available for addresses in Germany\",\n            errorCode: \"NON_GERMAN_ADDRESS\"\n          });\n        }\n      }\n\n      res.json(address);\n    } catch (error) {\n      console.error(\"Geocoding error:\", error);\n      res.status(400).json({ error: \"Invalid request\" });\n    }\n  });\n\n  app.post(\"/api/ocr\", upload.single(\"image\"), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No image file provided\" });\n      }\n\n      // Check if Vision API is enabled\n      if (!visionEnabled || !visionClient) {\n        return res.status(503).json({ \n          error: \"OCR service not available. Google Cloud Vision API requires a valid JSON service account key.\" \n        });\n      }\n\n      // Parse address from request body - REQUIRED\n      let address: Address | undefined;\n      if (req.body.address) {\n        try {\n          address = JSON.parse(req.body.address);\n        } catch (e) {\n          console.error(\"Failed to parse address:\", e);\n          return res.status(400).json({ error: \"Invalid address format\" });\n        }\n      }\n      \n      // Address is required for photo upload\n      if (!address || (!address.postal && !address.street && !address.number)) {\n        return res.status(400).json({ \n          error: \"Address is required for photo upload. Please enter at least postal code, street, or house number.\" \n        });\n      }\n\n      // Perform text detection\n      const [result] = await visionClient.textDetection({\n        image: { content: req.file.buffer },\n      });\n\n      const detections = result.textAnnotations;\n      const fullVisionResponse = result;\n\n      // Even if no text detected, we still want to show customers at the address\n      if (!detections || detections.length === 0) {\n        const allCustomersAtAddress = await storage.getCustomersByAddress(address);\n        return res.json({\n          residentNames: [],\n          fullVisionResponse,\n          newProspects: [],\n          existingCustomers: [],\n          allCustomersAtAddress,\n        } as OCRResponse);\n      }\n\n      // Extract full text\n      const fullText = detections[0]?.description || '';\n\n      // Split by line breaks and filter for names\n      const lines = fullText.split('\\n').map((line: string) => line.trim()).filter((line: string) => line.length > 0);\n\n      const residentNames: string[] = [];\n\n      // Common words to exclude (not names)\n      const excludeWords = ['qg', 'eg', 'og', 'dg', 'apartment', 'wohnung', 'haus', 'street', 'strasse', 'str'];\n\n      for (const line of lines) {\n        // Replace hyphens, periods, slashes, backslashes, pipes with spaces, then normalize whitespace\n        let cleanedLine = line.replace(/[-\\.\\/\\\\|]/g, ' ').replace(/\\s+/g, ' ').trim();\n\n        // Skip empty lines or very short lines\n        if (cleanedLine.length === 0) continue;\n\n        // More flexible matching - accept various name formats...\n        // Check if line contains at least one letter or digit\n        if (!/[a-zA-ZäöüÄÖÜß0-9]/.test(cleanedLine)) continue;\n\n        // Check if it's an excluded word\n        const lowerLine = cleanedLine.toLowerCase();\n        if (excludeWords.some(word => lowerLine === word)) continue;\n\n        // Accept the line as a potential name if...\n        const hasUpperOrNumber = /[A-ZÄÖÜ0-9]/.test(line);  // Note: Using original line for case check\n        const notTooLong = cleanedLine.length <= 30;\n        const notTooManySpecialChars = (line.match(/[^a-zA-ZäöüÄÖÜß0-9\\s]/g) || []).length <= 3;\n\n        if (hasUpperOrNumber && notTooLong && notTooManySpecialChars) {\n          // Normalize name: convert to lowercase\n          let name = cleanedLine.toLowerCase();\n\n          // NEW: After standardization, split into words and filter for words with at least 3 letters\n          const words = name.split(/\\s+/);\n          const filteredWords = words.filter((word: string) => word.length >= 3);\n\n          // If no words left after filtering, skip this name\n          if (filteredWords.length === 0) continue;\n\n          // Join filtered words back to name\n          name = filteredWords.join(' ');\n\n          // Allow duplicate names (for duplicate detection)\n          if (name.length >= 1) {\n            residentNames.push(name);\n          }\n        }\n      }\n\n      // Get all customers at this address first\n      const allCustomersAtAddress = await storage.getCustomersByAddress(address);\n      \n      // Search for matching customers (name matching within address-filtered customers)\n      const existingCustomers: Customer[] = [];\n      const newProspects: string[] = [];\n\n      for (const residentName of residentNames) {\n        const matches = await storage.searchCustomers(residentName, address);\n        \n        if (matches.length > 0) {\n          // Add all matches to existing customers\n          existingCustomers.push(...matches);\n        } else {\n          // No match found - this is a prospect\n          newProspects.push(residentName);\n        }\n      }\n\n      const response: OCRResponse = {\n        residentNames,\n        fullVisionResponse,\n        newProspects,\n        existingCustomers,\n        allCustomersAtAddress,\n      };\n\n      res.json(response);\n    } catch (error) {\n      console.error(\"OCR error:\", error);\n      res.status(500).json({ error: \"OCR processing failed\" });\n    }\n  });\n\n  app.post(\"/api/ocr-correct\", async (req, res) => {\n    try {\n      const { residentNames, address } = ocrCorrectionRequestSchema.parse(req.body);\n\n      // Address is required\n      if (!address || (!address.postal && !address.street && !address.number)) {\n        return res.status(400).json({ \n          error: \"Address is required. Please enter at least postal code, street, or house number.\" \n        });\n      }\n\n      // Get all customers at this address first\n      const allCustomersAtAddress = await storage.getCustomersByAddress(address);\n\n      const existingCustomers: Customer[] = [];\n      const newProspects: string[] = [];\n\n      for (const residentName of residentNames) {\n        const matches = await storage.searchCustomers(residentName, address);\n        \n        if (matches.length > 0) {\n          existingCustomers.push(...matches);\n        } else {\n          newProspects.push(residentName);\n        }\n      }\n\n      const response: OCRResponse = {\n        residentNames,\n        fullVisionResponse: null,\n        newProspects,\n        existingCustomers,\n        allCustomersAtAddress,\n      };\n\n      res.json(response);\n    } catch (error) {\n      console.error(\"OCR correction error:\", error);\n      res.status(400).json({ error: \"Invalid request\" });\n    }\n  });\n\n  app.post(\"/api/search-address\", async (req, res) => {\n    try {\n      const address = addressSchema.partial().parse(req.body);\n      \n      // Use the storage method with fuzzy matching\n      const matches = await storage.getCustomersByAddress(address);\n      \n      res.json(matches);\n    } catch (error) {\n      console.error(\"Address search error:\", error);\n      res.status(400).json({ error: \"Invalid request\" });\n    }\n  });\n\n  app.get(\"/api/customers\", async (req, res) => {\n    try {\n      const customers = await storage.getAllCustomers();\n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n      res.status(500).json({ error: \"Failed to fetch customers\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":10794},"server/storage.ts":{"content":"import { type User, type InsertUser, type Customer, type InsertCustomer, type Address } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { google } from \"googleapis\";\nimport leven from \"leven\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  getCustomer(id: string): Promise<Customer | undefined>;\n  getCustomerByName(name: string, address?: Partial<Address>): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  getAllCustomers(): Promise<Customer[]>;\n  searchCustomers(name: string, address?: Partial<Address>): Promise<Customer[]>;\n  getCustomersByAddress(address: Partial<Address>): Promise<Customer[]>;\n}\n\nexport class GoogleSheetsStorage implements IStorage {\n  private users: Map<string, User>;\n  private sheetsClient: any;\n  private cache: { customers: Customer[] | null; timestamp: number | null };\n  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n  private readonly SPREADSHEET_ID = '1IF9ieZQ_irKs9XU7XZmDuBaT4XqQrtm0EmfKbA3zB4s';\n  private readonly SHEET_NAME = 'Customers';\n  private initialized: boolean = false;\n\n  constructor() {\n    this.users = new Map();\n    this.cache = { customers: null, timestamp: null };\n    this.initializeSheets();\n  }\n\n  /**\n   * Normalize street name by replacing street suffixes at the END with 'strasse' (consistent form for length preservation)\n   * - Convert to lowercase\n   * - Replace umlauts early\n   * - Replace variants ONLY at the end (no \\b to allow attached suffixes)\n   * - Handle more typos and remove special characters/spaces\n   */\n  private normalizeStreet(street: string): string {\n    return street\n      .toLowerCase()\n      .trim()\n      // Replace umlauts early (ß to ss)\n      .replace(/ß/g, 'ss')\n      // Replace variants at the END with 'strasse' (no \\b, adjusted for ss)\n      .replace(/(str(asse|.?|eet)?|strasse|st\\.?|st|street|strse|strase|strsse)$/g, 'strasse')  // Removed \\b, all variants without ß, added 'strsse' for typos\n      // Remove special characters and spaces\n      .replace(/[-\\.\\s]/g, '');\n  }\n\n  /**\n   * Calculate similarity between two streets using Levenshtein distance\n   * Returns similarity percentage (0-100)\n   * Added min length check\n   */\n  private calculateStreetSimilarity(street1: string, street2: string): number {\n    const normalized1 = this.normalizeStreet(street1);\n    const normalized2 = this.normalizeStreet(street2);\n\n    // Min length check: If both < 3 chars, require exact match\n    if (normalized1.length < 3 && normalized2.length < 3) {\n      return normalized1 === normalized2 ? 100 : 0;\n    }\n\n    const maxLength = Math.max(normalized1.length, normalized2.length);\n    if (maxLength === 0) return 100;\n\n    const distance = leven(normalized1, normalized2);\n    const similarity = (1 - distance / maxLength) * 100;\n\n    return similarity;\n  }\n\n  /**\n   * Check if two streets match using fuzzy matching\n   * Returns true if similarity >= 90% (for typo tolerance)\n   */\n  private streetsMatch(street1: string, street2: string): boolean {\n    const similarity = this.calculateStreetSimilarity(street1, street2);\n    return similarity >= 90;\n  }\n\n  private initializeSheets() {\n    try {\n      const sheetsKey = process.env.GOOGLE_SHEETS_KEY || '{}';\n      \n      // Check if it's a valid JSON (service account key)\n      if (!sheetsKey.startsWith('{')) {\n        console.warn('GOOGLE_SHEETS_KEY is not a valid JSON service account key. Google Sheets integration disabled.');\n        console.warn('To enable Google Sheets, provide a JSON service account key with Sheets API access.');\n        this.initialized = false;\n        return;\n      }\n\n      const credentials = JSON.parse(sheetsKey);\n      const auth = new google.auth.GoogleAuth({\n        credentials,\n        scopes: ['https://www.googleapis.com/auth/spreadsheets'],\n      });\n      this.sheetsClient = google.sheets({ version: 'v4', auth });\n      this.initialized = true;\n      console.log('Google Sheets integration initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize Google Sheets client:', error);\n      console.warn('Google Sheets integration disabled. Using in-memory storage fallback.');\n      this.initialized = false;\n    }\n  }\n\n  private isCacheValid(): boolean {\n    if (!this.cache.customers || !this.cache.timestamp) return false;\n    return Date.now() - this.cache.timestamp < this.CACHE_TTL;\n  }\n\n  private async fetchCustomersFromSheet(): Promise<Customer[]> {\n    if (!this.initialized) {\n      console.log('Google Sheets not initialized, returning empty customer list');\n      return [];\n    }\n\n    if (this.isCacheValid() && this.cache.customers) {\n      console.log(`Using cached customer data (${this.cache.customers.length} customers)`);\n      return this.cache.customers;\n    }\n\n    try {\n      console.log('Fetching customers from Google Sheets...');\n      const response = await this.sheetsClient.spreadsheets.values.get({\n        spreadsheetId: this.SPREADSHEET_ID,\n        range: `${this.SHEET_NAME}!A2:D`, // Skip header row, columns: Name, Straße, Hausnummer, Postleitzahl\n      });\n\n      const rows = response.data.values || [];\n      console.log(`Fetched ${rows.length} rows from Google Sheets`);\n      \n      const customers: Customer[] = rows\n        .filter((row: any[]) => row[0]) // Must have a name\n        .map((row: any[]) => ({\n          id: randomUUID(),\n          name: row[0] || '',\n          street: row[1] || null,\n          houseNumber: row[2] || null,\n          postalCode: row[3] || null,\n          isExisting: true, // All customers in the sheet are existing\n        }));\n\n      console.log(`Parsed ${customers.length} customers:`, customers.map(c => ({ \n        name: c.name, \n        street: c.street, \n        houseNumber: c.houseNumber, \n        postalCode: c.postalCode \n      })));\n\n      this.cache.customers = customers;\n      this.cache.timestamp = Date.now();\n\n      return customers;\n    } catch (error) {\n      console.error('Failed to fetch customers from Google Sheets:', error);\n      return [];\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const customers = await this.fetchCustomersFromSheet();\n    return customers.find(c => c.id === id);\n  }\n\n  async getCustomerByName(name: string, address?: Partial<Address>): Promise<Customer | undefined> {\n    const customers = await this.searchCustomers(name, address);\n    return customers[0];\n  }\n\n  async getCustomersByAddress(address: Partial<Address>): Promise<Customer[]> {\n    const customers = await this.fetchCustomersFromSheet();\n    \n    let matches = customers;\n    \n    // Filter by postal code (most important and most unique) - EXACT match\n    if (address.postal) {\n      const searchPostal = address.postal.toLowerCase().trim();\n      matches = matches.filter(customer => \n        customer.postalCode?.toLowerCase().trim() === searchPostal\n      );\n    }\n    \n    // Filter by street using fuzzy matching (>=95% similarity)\n    if (address.street) {\n      const searchStreet = address.street;\n      matches = matches.filter(customer => {\n        if (!customer.street) return false;\n        return this.streetsMatch(searchStreet, customer.street);\n      });\n    }\n    \n    // Filter by house number (flexible matching - prefix match, improved)\n    if (address.number) {\n      const normalizeNumber = (num: string) => num.toLowerCase().trim().replace(/[.-]/g, '');  // Remove dots/hyphens for tolerance\n      const searchNumber = normalizeNumber(address.number);\n      matches = matches.filter(customer => {\n        if (!customer.houseNumber) return false;\n        const customerNumber = normalizeNumber(customer.houseNumber);\n        // Stricter: Exact match or customer starts with search (avoids search longer than customer)\n        return customerNumber === searchNumber || customerNumber.startsWith(searchNumber);\n      });\n    }\n    \n    return matches;\n  }\n\n  async searchCustomers(name: string, address?: Partial<Address>): Promise<Customer[]> {\n    // If address is provided, FIRST filter customers by address\n    let customersToSearch: Customer[];\n    \n    if (address && (address.postal || address.street || address.number)) {\n      // Filter by address FIRST\n      customersToSearch = await this.getCustomersByAddress(address);\n    } else {\n      // No address provided, search all customers\n      customersToSearch = await this.fetchCustomersFromSheet();\n    }\n    \n    // Now search names ONLY within the address-filtered customers\n    const normalizedSearchName = name.toLowerCase().trim();\n    const searchWords = normalizedSearchName.split(/\\s+/).filter(word => word.length >= 2);\n\n    const matches = customersToSearch.filter(customer => {\n      const customerNameWords = customer.name.toLowerCase().trim().split(/\\s+/);\n      \n      // Neu: Exakter Match - prüfe, ob searchWord exakt in customerNameWords vorkommt\n        return searchWords.some(searchWord => \n          customerNameWords.includes(searchWord)\n        );\n      });\n    \n    return matches;\n  }\n\n  async createCustomer(insertCustomer: InsertCustomer): Promise<Customer> {\n    if (!this.initialized) {\n      // If Sheets is not initialized, just return the customer without saving\n      const customer: Customer = {\n        id: randomUUID(),\n        name: insertCustomer.name,\n        street: insertCustomer.street || null,\n        houseNumber: insertCustomer.houseNumber || null,\n        postalCode: insertCustomer.postalCode || null,\n        isExisting: insertCustomer.isExisting ?? true,\n      };\n      return customer;\n    }\n\n    try {\n      const values = [[\n        insertCustomer.name,\n        insertCustomer.street || '',\n        insertCustomer.houseNumber || '',\n        insertCustomer.postalCode || '',\n      ]];\n\n      await this.sheetsClient.spreadsheets.values.append({\n        spreadsheetId: this.SPREADSHEET_ID,\n        range: `${this.SHEET_NAME}!A:D`,\n        valueInputOption: 'RAW',\n        resource: { values },\n      });\n\n      // Invalidate cache\n      this.cache.customers = null;\n      this.cache.timestamp = null;\n\n      const customer: Customer = {\n        id: randomUUID(),\n        name: insertCustomer.name,\n        street: insertCustomer.street || null,\n        houseNumber: insertCustomer.houseNumber || null,\n        postalCode: insertCustomer.postalCode || null,\n        isExisting: insertCustomer.isExisting ?? true,\n      };\n\n      return customer;\n    } catch (error) {\n      console.error('Failed to create customer in Google Sheets:', error);\n      throw new Error('Failed to create customer in Google Sheets');\n    }\n  }\n\n  async getAllCustomers(): Promise<Customer[]> {\n    return this.fetchCustomersFromSheet();\n  }\n}\n\nexport const storage = new GoogleSheetsStorage();\n","size_bytes":11352},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  street: text(\"street\"),\n  houseNumber: text(\"house_number\"),\n  postalCode: text(\"postal_code\"),\n  isExisting: boolean(\"is_existing\").notNull().default(true),\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n});\n\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Customer = typeof customers.$inferSelect;\n\nexport const geocodingRequestSchema = z.object({\n  latitude: z.number(),\n  longitude: z.number(),\n});\n\nexport type GeocodingRequest = z.infer<typeof geocodingRequestSchema>;\n\nexport const addressSchema = z.object({\n  street: z.string(),\n  number: z.string(),\n  city: z.string().optional(),\n  postal: z.string(),\n  country: z.string().optional(),\n});\n\nexport type Address = z.infer<typeof addressSchema>;\n\nexport const ocrRequestSchema = z.object({\n  imageData: z.string(),\n});\n\nexport type OCRRequest = z.infer<typeof ocrRequestSchema>;\n\nexport const ocrResponseSchema = z.object({\n  residentNames: z.array(z.string()),\n  fullVisionResponse: z.any(),\n  newProspects: z.array(z.string()),\n  existingCustomers: z.array(z.object({\n    id: z.string().optional(),\n    name: z.string(),\n    street: z.string().nullable().optional(),\n    houseNumber: z.string().nullable().optional(),\n    postalCode: z.string().nullable().optional(),\n    isExisting: z.boolean(),\n  })),\n  allCustomersAtAddress: z.array(z.object({\n    id: z.string().optional(),\n    name: z.string(),\n    street: z.string().nullable().optional(),\n    houseNumber: z.string().nullable().optional(),\n    postalCode: z.string().nullable().optional(),\n    isExisting: z.boolean(),\n  })).optional(),\n});\n\nexport type OCRResponse = z.infer<typeof ocrResponseSchema>;\n\nexport const ocrCorrectionRequestSchema = z.object({\n  residentNames: z.array(z.string()),\n  address: addressSchema.optional(),\n});\n\nexport type OCRCorrectionRequest = z.infer<typeof ocrCorrectionRequestSchema>;\n","size_bytes":2651},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { I18nextProvider } from 'react-i18next';\nimport i18n from './i18n';\nimport ScannerPage from \"@/pages/scanner\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={ScannerPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <I18nextProvider i18n={i18n}>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </I18nextProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":861},"client/src/i18n.ts":{"content":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nconst resources = {\n  en: {\n    translation: {\n      \"app.title\": \"Sales Acquisition Tool\",\n      \"gps.title\": \"Location\",\n      \"gps.detecting\": \"Detecting location...\",\n      \"gps.detected\": \"Location detected\",\n      \"gps.error\": \"Failed to get location\",\n      \"gps.button\": \"Detect Location\",\n      \"gps.germanyOnly\": \"This service is only available for addresses in Germany.\",\n      \"address.street\": \"Street\",\n      \"address.number\": \"Number\",\n      \"address.city\": \"City\",\n      \"address.postal\": \"Postal Code\",\n      \"address.country\": \"Country\",\n      \"photo.title\": \"Nameplate Photo\",\n      \"photo.upload\": \"Upload Photo\",\n      \"photo.take\": \"Take Photo\",\n      \"photo.process\": \"Process\",\n      \"photo.processing\": \"Processing image...\",\n      \"photo.success\": \"Processing complete\",\n      \"photo.warning\": \"Warning\",\n      \"photo.found\": \"Found\",\n      \"photo.names\": \"name(s)\",\n      \"photo.error\": \"Processing failed\",\n      \"photo.errorDesc\": \"Unable to extract text from image\",\n      \"photo.addressRequired\": \"Address not fully specified.\",\n      \"photo.noTextExtracted\": \"No text could be extracted from the image.\",\n      \"photo.nameUpdated\": \"Name updated successfully\",\n      \"photo.updateFailed\": \"Failed to update name\",\n      \"photo.editName\": \"Edit Name\",\n      \"photo.legend.prospects\": \"Prospects\",\n      \"photo.legend.existing\": \"Existing Customers\",\n      \"photo.legend.duplicates\": \"Duplicates\",\n      \"results.title\": \"Results\",\n      \"results.names\": \"Extracted Names\",\n      \"results.existing\": \"Existing Customer\",\n      \"results.prospect\": \"Potential Prospect\",\n      \"results.existingCustomers\": \"Existing Customers\",\n      \"results.newProspects\": \"New Prospects\",\n      \"results.allCustomersAtAddress\": \"All Existing Customers at this Address\",\n      \"results.duplicateNames\": \"Duplicate Names\",\n      \"results.empty\": \"No results yet\",\n      \"correction.title\": \"Correct Names\",\n      \"correction.description\": \"Review and edit the extracted names, then resubmit for customer lookup.\",\n      \"correction.nameLabel\": \"Name\",\n      \"correction.namePlaceholder\": \"Name\",\n      \"correction.addName\": \"Add Name\",\n      \"correction.submit\": \"Submit\",\n      \"correction.cancel\": \"Cancel\",\n      \"correction.processing\": \"Processing...\",\n      \"correction.success\": \"Correction complete\",\n      \"correction.found\": \"Found\",\n      \"correction.customers\": \"customer(s)\",\n      \"correction.error\": \"Correction failed\",\n      \"correction.errorDesc\": \"Unable to process corrected names\",\n      \"correction.noNames\": \"No names provided\",\n      \"correction.noNamesDesc\": \"Please enter at least one name\",\n      \"action.save\": \"Save\",\n      \"action.reset\": \"Reset\",\n      \"action.edit\": \"Edit\",\n      \"action.correct\": \"Correct\",\n      \"action.searchAddress\": \"Search Address\",\n      \"address.searching\": \"Searching...\",\n      \"address.searchSuccess\": \"Found\",\n      \"address.searchSuccessDesc\": \"customer(s) at this address\",\n      \"address.searchError\": \"Search failed\",\n    }\n  },\n  de: {\n    translation: {\n      \"app.title\": \"Akquise-Tool\",\n      \"gps.title\": \"Standort\",\n      \"gps.detecting\": \"Standort wird ermittelt...\",\n      \"gps.detected\": \"Standort erkannt\",\n      \"gps.error\": \"Standort konnte nicht ermittelt werden\",\n      \"gps.button\": \"Standort ermitteln\",\n      \"gps.germanyOnly\": \"Dieser Service ist nur für Adressen in Deutschland verfügbar.\",\n      \"address.street\": \"Straße\",\n      \"address.number\": \"Nummer\",\n      \"address.city\": \"Stadt\",\n      \"address.postal\": \"Postleitzahl\",\n      \"address.country\": \"Land\",\n      \"photo.title\": \"Klingelschild Foto\",\n      \"photo.upload\": \"Foto hochladen\",\n      \"photo.take\": \"Foto aufnehmen\",\n      \"photo.process\": \"Verarbeiten\",\n      \"photo.processing\": \"Bild wird verarbeitet...\",\n      \"photo.success\": \"Verarbeitung abgeschlossen\",\n      \"photo.warning\": \"Warnung\",\n      \"photo.found\": \"Gefunden\",\n      \"photo.names\": \"Name(n)\",\n      \"photo.error\": \"Verarbeitung fehlgeschlagen\",\n      \"photo.errorDesc\": \"Text konnte nicht aus dem Bild extrahiert werden\",\n      \"photo.addressRequired\": \"Adresse wurde nicht vollständig angegeben.\",\n      \"photo.noTextExtracted\": \"Es konnten kein Text aus dem Bild extrahiert werden.\",\n      \"photo.nameUpdated\": \"Name erfolgreich aktualisiert\",\n      \"photo.updateFailed\": \"Aktualisierung des Namens fehlgeschlagen\",\n      \"photo.editName\": \"Name bearbeiten\",\n      \"photo.legend.prospects\": \"Interessenten\",\n      \"photo.legend.existing\": \"Bestandskunden\",\n      \"photo.legend.duplicates\": \"Duplikate\",\n      \"results.title\": \"Ergebnisse\",\n      \"results.names\": \"Extrahierte Namen\",\n      \"results.existing\": \"Bestandskunde\",\n      \"results.prospect\": \"Potentieller Neukunde\",\n      \"results.existingCustomers\": \"Bestandskunden\",\n      \"results.newProspects\": \"Neue Interessenten\",\n      \"results.allCustomersAtAddress\": \"Alle Bestandskunden an dieser Adresse\",\n      \"results.duplicateNames\": \"Doppelte Namen\",\n      \"results.empty\": \"Noch keine Ergebnisse\",\n      \"correction.title\": \"Namen korrigieren\",\n      \"correction.description\": \"Überprüfen und bearbeiten Sie die extrahierten Namen und senden Sie sie erneut zur Kundensuche.\",\n      \"correction.nameLabel\": \"Name\",\n      \"correction.namePlaceholder\": \"Name\",\n      \"correction.addName\": \"Name hinzufügen\",\n      \"correction.submit\": \"Absenden\",\n      \"correction.cancel\": \"Abbrechen\",\n      \"correction.processing\": \"Verarbeite...\",\n      \"correction.success\": \"Korrektur abgeschlossen\",\n      \"correction.found\": \"Gefunden\",\n      \"correction.customers\": \"Kunde(n)\",\n      \"correction.error\": \"Korrektur fehlgeschlagen\",\n      \"correction.errorDesc\": \"Korrigierte Namen konnten nicht verarbeitet werden\",\n      \"correction.noNames\": \"Keine Namen angegeben\",\n      \"correction.noNamesDesc\": \"Bitte geben Sie mindestens einen Namen ein\",\n      \"action.save\": \"Speichern\",\n      \"action.reset\": \"Zurücksetzen\",\n      \"action.edit\": \"Bearbeiten\",\n      \"action.correct\": \"Korrigieren\",\n      \"action.searchAddress\": \"Adresse durchsuchen\",\n      \"address.searching\": \"Suche läuft...\",\n      \"address.searchSuccess\": \"Gefunden\",\n      \"address.searchSuccessDesc\": \"Kunde(n) an dieser Adresse\",\n      \"address.searchError\": \"Suche fehlgeschlagen\",\n    }\n  }\n};\n\ni18n\n  .use(initReactI18next)\n  .init({\n    resources,\n    lng: 'de',\n    fallbackLng: 'en',\n    interpolation: {\n      escapeValue: false\n    }\n  });\n\nexport default i18n;\n","size_bytes":6514},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 17% 98%;\n\n  --foreground: 210 11% 15%;\n\n  --border: 210 14% 89%;\n\n  --card: 210 17% 96%;\n\n  --card-foreground: 210 11% 15%;\n\n  --card-border: 210 14% 87%;\n\n  --sidebar: 210 17% 94%;\n\n  --sidebar-foreground: 210 11% 15%;\n\n  --sidebar-border: 210 14% 85%;\n\n  --sidebar-primary: 207 100% 40%;\n\n  --sidebar-primary-foreground: 210 17% 98%;\n\n  --sidebar-accent: 210 12% 90%;\n\n  --sidebar-accent-foreground: 210 11% 15%;\n\n  --sidebar-ring: 207 100% 40%;\n\n  --popover: 210 17% 92%;\n\n  --popover-foreground: 210 11% 15%;\n\n  --popover-border: 210 14% 83%;\n\n  --primary: 207 100% 40%;\n\n  --primary-foreground: 210 17% 98%;\n\n  --secondary: 210 12% 88%;\n\n  --secondary-foreground: 210 11% 15%;\n\n  --muted: 210 12% 90%;\n\n  --muted-foreground: 210 11% 35%;\n\n  --accent: 210 15% 88%;\n\n  --accent-foreground: 210 11% 15%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 210 14% 75%;\n  --ring: 207 100% 40%;\n  --chart-1: 207 100% 35%;\n  --chart-2: 134 61% 38%;\n  --chart-3: 45 100% 45%;\n  --chart-4: 280 65% 40%;\n  --chart-5: 25 90% 48%;\n  \n  --success: 134 61% 41%;\n  --success-foreground: 0 0% 100%;\n  --warning: 45 100% 51%;\n  --warning-foreground: 210 11% 15%;\n\n  --font-sans: SF Pro Display, Inter, Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: SF Mono, Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 14% 20% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(210 14% 20% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(210 14% 20% / 0.06), 0px 1px 2px -1px hsl(210 14% 20% / 0.08);\n  --shadow: 0px 4px 6px -1px hsl(210 14% 20% / 0.08), 0px 2px 4px -1px hsl(210 14% 20% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(210 14% 20% / 0.10), 0px 3px 6px -2px hsl(210 14% 20% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(210 14% 20% / 0.12), 0px 4px 8px -2px hsl(210 14% 20% / 0.08);\n  --shadow-xl: 0px 20px 30px -6px hsl(210 14% 20% / 0.14), 0px 8px 12px -4px hsl(210 14% 20% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(210 14% 20% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 11% 15%;\n\n  --foreground: 210 17% 98%;\n\n  --border: 210 10% 25%;\n\n  --card: 210 10% 18%;\n\n  --card-foreground: 210 17% 98%;\n\n  --card-border: 210 10% 28%;\n\n  --sidebar: 210 10% 20%;\n\n  --sidebar-foreground: 210 17% 98%;\n\n  --sidebar-border: 210 10% 30%;\n\n  --sidebar-primary: 207 100% 40%;\n\n  --sidebar-primary-foreground: 210 17% 98%;\n\n  --sidebar-accent: 210 10% 25%;\n\n  --sidebar-accent-foreground: 210 17% 98%;\n\n  --sidebar-ring: 207 100% 50%;\n\n  --popover: 210 10% 22%;\n\n  --popover-foreground: 210 17% 98%;\n\n  --popover-border: 210 10% 32%;\n\n  --primary: 207 100% 40%;\n\n  --primary-foreground: 210 17% 98%;\n\n  --secondary: 210 10% 28%;\n\n  --secondary-foreground: 210 17% 98%;\n\n  --muted: 210 10% 26%;\n\n  --muted-foreground: 210 17% 70%;\n\n  --accent: 210 12% 27%;\n\n  --accent-foreground: 210 17% 98%;\n\n  --destructive: 0 84% 35%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 210 10% 40%;\n  --ring: 207 100% 50%;\n  --chart-1: 207 100% 65%;\n  --chart-2: 134 61% 60%;\n  --chart-3: 45 100% 65%;\n  --chart-4: 280 65% 65%;\n  --chart-5: 25 90% 62%;\n  \n  --success: 134 61% 45%;\n  --success-foreground: 0 0% 100%;\n  --warning: 45 100% 55%;\n  --warning-foreground: 210 11% 15%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 14% 5% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(210 14% 5% / 0.40);\n  --shadow-sm: 0px 2px 4px -1px hsl(210 14% 5% / 0.35), 0px 1px 2px -1px hsl(210 14% 5% / 0.40);\n  --shadow: 0px 4px 6px -1px hsl(210 14% 5% / 0.45), 0px 2px 4px -1px hsl(210 14% 5% / 0.35);\n  --shadow-md: 0px 6px 12px -2px hsl(210 14% 5% / 0.50), 0px 3px 6px -2px hsl(210 14% 5% / 0.40);\n  --shadow-lg: 0px 10px 20px -4px hsl(210 14% 5% / 0.55), 0px 4px 8px -2px hsl(210 14% 5% / 0.45);\n  --shadow-xl: 0px 20px 30px -6px hsl(210 14% 5% / 0.60), 0px 8px 12px -4px hsl(210 14% 5% / 0.50);\n  --shadow-2xl: 0px 25px 50px -12px hsl(210 14% 5% / 0.70);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11576},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/GPSAddressForm.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { MapPin, Loader2, Check, Search } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface GPSAddressFormProps {\n  onAddressDetected?: (address: Address) => void;\n  onAddressSearch?: (customers: any[]) => void;\n}\n\nexport interface Address {\n  street: string;\n  number: string;\n  city: string;\n  postal: string;\n  country: string;\n}\n\nexport default function GPSAddressForm({ onAddressDetected, onAddressSearch }: GPSAddressFormProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [searching, setSearching] = useState(false);\n  const [detected, setDetected] = useState(false);\n  const [address, setAddress] = useState<Address>({\n    street: '',\n    number: '',\n    city: '',\n    postal: '',\n    country: ''\n  });\n\n  // Notify parent component whenever address changes (including manual edits)\n  useEffect(() => {\n    onAddressDetected?.(address);\n  }, [address, onAddressDetected]);\n\n  const detectLocation = async () => {\n    setLoading(true);\n    setDetected(false);\n    \n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          try {\n            const response = await fetch('/api/geocode', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                latitude: position.coords.latitude,\n                longitude: position.coords.longitude,\n              }),\n            });\n\n            if (!response.ok) {\n              throw new Error('Geocoding failed');\n            }\n\n            const addressData = await response.json();\n            \n            // Check if the address is in Germany\n            if (addressData.country && addressData.country.toLowerCase() !== 'deutschland' && addressData.country.toLowerCase() !== 'germany') {\n              toast({\n                variant: 'destructive',\n                title: t('gps.error'),\n                description: t('gps.germanyOnly'),\n              });\n              setLoading(false);\n              return;\n            }\n            \n            setAddress(addressData);\n            setDetected(true);\n            onAddressDetected?.(addressData);\n          } catch (error) {\n            console.error('Geocoding error:', error);\n            toast({\n              variant: 'destructive',\n              title: t('gps.error'),\n              description: 'Unable to detect address from location',\n            });\n          } finally {\n            setLoading(false);\n          }\n        },\n        (error) => {\n          setLoading(false);\n          console.error('Geolocation error:', error);\n          toast({\n            variant: 'destructive',\n            title: t('gps.error'),\n            description: 'Location permission denied',\n          });\n        }\n      );\n    } else {\n      setLoading(false);\n      toast({\n        variant: 'destructive',\n        title: t('gps.error'),\n        description: 'Geolocation not supported',\n      });\n    }\n  };\n\n  const searchAddress = async () => {\n    setSearching(true);\n    \n    try {\n      // Only send non-empty address fields\n      const searchParams: Partial<Address> = {};\n      if (address.street.trim()) searchParams.street = address.street;\n      if (address.number.trim()) searchParams.number = address.number;\n      if (address.postal.trim()) searchParams.postal = address.postal;\n      if (address.city.trim()) searchParams.city = address.city;\n      if (address.country.trim()) searchParams.country = address.country;\n      \n      const response = await fetch('/api/search-address', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(searchParams),\n      });\n\n      if (!response.ok) {\n        throw new Error('Address search failed');\n      }\n\n      const customers = await response.json();\n      \n      if (customers.length === 0) {\n        toast({\n          title: t('address.searchSuccess'),\n          description: t('results.empty'),\n        });\n      } else {\n        toast({\n          title: t('address.searchSuccess'),\n          description: `${customers.length} ${t('address.searchSuccessDesc')}`,\n        });\n      }\n      \n      onAddressSearch?.(customers);\n    } catch (error) {\n      console.error('Address search error:', error);\n      toast({\n        variant: 'destructive',\n        title: t('address.searchError'),\n        description: 'Unable to search address',\n      });\n    } finally {\n      setSearching(false);\n    }\n  };\n\n  const hasAddressData = address.postal || address.street;\n\n  return (\n    <Card data-testid=\"card-gps-address\">\n      <CardHeader className=\"flex flex-row items-center justify-between gap-4 space-y-0 pb-4\">\n        <CardTitle className=\"text-lg font-semibold\">{t('gps.title')}</CardTitle>\n        <Button\n          onClick={detectLocation}\n          disabled={loading}\n          size=\"default\"\n          data-testid=\"button-detect-location\"\n          className=\"gap-2\"\n        >\n          {loading ? (\n            <Loader2 className=\"h-4 w-4 animate-spin\" />\n          ) : detected ? (\n            <Check className=\"h-4 w-4\" />\n          ) : (\n            <MapPin className=\"h-4 w-4\" />\n          )}\n          {loading ? t('gps.detecting') : detected ? t('gps.detected') : t('gps.button')}\n        </Button>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div className=\"col-span-2\">\n            <Label htmlFor=\"street\" className=\"text-sm font-medium\">{t('address.street')}</Label>\n            <Input\n              id=\"street\"\n              value={address.street}\n              onChange={(e) => setAddress({ ...address, street: e.target.value })}\n              data-testid=\"input-street\"\n              className=\"mt-1.5 min-h-11\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"number\" className=\"text-sm font-medium\">{t('address.number')}</Label>\n            <Input\n              id=\"number\"\n              value={address.number}\n              onChange={(e) => setAddress({ ...address, number: e.target.value })}\n              data-testid=\"input-number\"\n              className=\"mt-1.5 min-h-11\"\n            />\n          </div>\n        </div>\n        \n        <div>\n          <Label htmlFor=\"postal\" className=\"text-sm font-medium\">{t('address.postal')}</Label>\n          <Input\n            id=\"postal\"\n            value={address.postal}\n            onChange={(e) => setAddress({ ...address, postal: e.target.value })}\n            data-testid=\"input-postal\"\n            className=\"mt-1.5 min-h-11\"\n          />\n        </div>\n\n        {hasAddressData && (\n          <Button\n            onClick={searchAddress}\n            disabled={searching}\n            size=\"lg\"\n            variant=\"outline\"\n            data-testid=\"button-search-address\"\n            className=\"w-full min-h-12 gap-2\"\n          >\n            {searching ? (\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <Search className=\"h-4 w-4\" />\n            )}\n            {searching ? t('address.searching') : t('action.searchAddress')}\n          </Button>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7669},"client/src/components/LanguageToggle.tsx":{"content":"import { useTranslation } from 'react-i18next';\nimport { Button } from '@/components/ui/button';\nimport { Languages } from 'lucide-react';\n\nexport default function LanguageToggle() {\n  const { i18n } = useTranslation();\n\n  const toggleLanguage = () => {\n    const newLang = i18n.language === 'en' ? 'de' : 'en';\n    i18n.changeLanguage(newLang);\n  };\n\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"default\"\n      onClick={toggleLanguage}\n      data-testid=\"button-language-toggle\"\n      className=\"gap-2\"\n    >\n      <Languages className=\"h-4 w-4\" />\n      <span className=\"font-medium\">{i18n.language.toUpperCase()}</span>\n    </Button>\n  );\n}\n","size_bytes":658},"client/src/components/PhotoCapture.tsx":{"content":"import { useState, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Camera, Upload, Loader2, X } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport type { Address } from '@/components/GPSAddressForm';\n\ninterface PhotoCaptureProps {\n  onPhotoProcessed?: (results: any, imageSrc?: string) => void;\n  address?: Address | null;\n}\n\nexport default function PhotoCapture({ onPhotoProcessed, address }: PhotoCaptureProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [preview, setPreview] = useState<string | null>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [processing, setProcessing] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const processPhoto = async () => {\n    if (!selectedFile) return;\n\n    // Validate address fields\n    if (!address || !address.street || !address.number || !address.postal) {\n      toast({\n        variant: 'destructive',\n        title: t('photo.error'),\n        description: t('photo.addressRequired'),\n      });\n      return;\n    }\n\n    setProcessing(true);\n\n    try {\n      const formData = new FormData();\n      formData.append('image', selectedFile);\n      formData.append('address', JSON.stringify(address));\n\n      const response = await fetch('/api/ocr', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || 'OCR processing failed');\n      }\n\n      const result = await response.json();\n      onPhotoProcessed?.(result, preview || undefined);\n      \n      const totalNames = result.residentNames?.length || 0;\n      if (totalNames === 0) {\n        toast({\n          title: t('photo.warning'),\n          description: t('photo.noTextExtracted'),\n        });\n      } else {\n        toast({\n          title: t('photo.success'),\n          description: `${t('photo.found')} ${totalNames} ${t('photo.names')}`,\n        });\n      }\n    } catch (error) {\n      console.error('OCR error:', error);\n      const errorMessage = error instanceof Error ? error.message : t('photo.errorDesc');\n      toast({\n        variant: 'destructive',\n        title: t('photo.error'),\n        description: errorMessage,\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const clearPhoto = () => {\n    setPreview(null);\n    setSelectedFile(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  return (\n    <Card data-testid=\"card-photo-capture\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold\">{t('photo.title')}</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {preview ? (\n          <div className=\"space-y-4\">\n            <div className=\"relative\">\n              <img \n                src={preview} \n                alt=\"Nameplate preview\" \n                className=\"w-full h-48 object-cover rounded-lg\"\n                data-testid=\"img-preview\"\n              />\n              {processing && (\n                <div className=\"absolute inset-0 bg-black/50 rounded-lg flex items-center justify-center\">\n                  <Loader2 className=\"h-8 w-8 text-white animate-spin\" />\n                </div>\n              )}\n              <Button\n                variant=\"destructive\"\n                size=\"icon\"\n                onClick={clearPhoto}\n                className=\"absolute top-2 right-2\"\n                data-testid=\"button-clear-photo\"\n                disabled={processing}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            <Button\n              onClick={processPhoto}\n              disabled={processing}\n              size=\"lg\"\n              className=\"w-full min-h-12 gap-2\"\n              data-testid=\"button-process-photo\"\n            >\n              {processing ? (\n                <>\n                  <Loader2 className=\"h-5 w-5 animate-spin\" />\n                  {t('photo.processing')}\n                </>\n              ) : (\n                t('photo.process')\n              )}\n            </Button>\n          </div>\n        ) : (\n          <div className=\"flex flex-col gap-2\">\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"image/*\"\n              capture=\"environment\"\n              onChange={handleFileChange}\n              className=\"hidden\"\n              id=\"photo-input\"\n              data-testid=\"input-file\"\n            />\n            <Button\n              onClick={() => fileInputRef.current?.click()}\n              disabled={processing}\n              size=\"lg\"\n              className=\"w-full min-h-11 gap-2\"\n              data-testid=\"button-take-photo\"\n            >\n              <Camera className=\"h-5 w-5\" />\n              {t('photo.take')}\n            </Button>\n            <Button\n              onClick={() => {\n                const input = fileInputRef.current;\n                if (input) {\n                  input.removeAttribute('capture');\n                  input.click();\n                }\n              }}\n              variant=\"outline\"\n              size=\"lg\"\n              className=\"w-full min-h-11 gap-2\"\n              data-testid=\"button-upload-photo\"\n              disabled={processing}\n            >\n              <Upload className=\"h-5 w-5\" />\n              {t('photo.upload')}\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6010},"client/src/components/ResultsDisplay.tsx":{"content":"import { useTranslation } from 'react-i18next';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { User, AlertCircle, UserCheck, UserPlus } from 'lucide-react';\nimport ImageWithOverlays from './ImageWithOverlays';\nimport type { Address } from '@/components/GPSAddressForm';\n\nexport interface Customer {\n  id?: string;\n  name: string;\n  street?: string | null;\n  houseNumber?: string | null;\n  postalCode?: string | null;\n  isExisting: boolean;\n}\n\nexport interface OCRResult {\n  residentNames: string[];\n  existingCustomers: Customer[];\n  newProspects: string[];\n  allCustomersAtAddress?: Customer[];\n  fullVisionResponse?: any;\n}\n\ninterface ResultsDisplayProps {\n  result?: OCRResult | null;\n  photoImageSrc?: string | null;\n  address?: Address | null;\n  onNamesUpdated?: (updatedNames: string[]) => void;\n}\n\nexport default function ResultsDisplay({ result, photoImageSrc, address, onNamesUpdated }: ResultsDisplayProps) {\n  const { t } = useTranslation();\n\n  if (!result || (result.existingCustomers.length === 0 && result.newProspects.length === 0 && (!result.allCustomersAtAddress || result.allCustomersAtAddress.length === 0))) {\n    return (\n      <Card data-testid=\"card-results\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold\">{t('results.title')}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n            <AlertCircle className=\"h-12 w-12 text-muted-foreground mb-3\" />\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-empty\">\n              {t('results.empty')}\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Show image with overlays if we have photo and vision response\n  const showImageOverlays = photoImageSrc && result.fullVisionResponse && result.residentNames.length > 0;\n\n  // Helper to determine what to display in the Bestandskunden section\n  // If we have residentNames (photo uploaded), show the photo names that matched\n  // If no residentNames (address-only search), show the customer names from database\n  const getMatchedNames = (): Array<{name: string, isPhotoName: boolean}> => {\n    if (result.residentNames.length > 0) {\n      // Photo was uploaded - show photo names that matched\n      const photoMatchedNames = result.residentNames.filter(name => !result.newProspects.includes(name));\n      return photoMatchedNames.map(name => ({name, isPhotoName: true}));\n    } else if (result.existingCustomers.length > 0) {\n      // Address-only search - show customer names from database\n      return result.existingCustomers.map(customer => ({name: customer.name, isPhotoName: false}));\n    }\n    return [];\n  };\n\n  const matchedNames = getMatchedNames();\n\n  return (\n    <>\n      {showImageOverlays && (\n        <div className=\"mb-4\">\n          <ImageWithOverlays\n            imageSrc={photoImageSrc!}\n            fullVisionResponse={result.fullVisionResponse}\n            residentNames={result.residentNames}\n            existingCustomers={result.existingCustomers}\n            newProspects={result.newProspects}\n            allCustomersAtAddress={result.allCustomersAtAddress}\n            address={address}\n            onNamesUpdated={onNamesUpdated}\n          />\n        </div>\n      )}\n      \n      <Card data-testid=\"card-results\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold\">{t('results.title')}</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n        {/* Show all customers at address from Google Sheets first */}\n        {result.allCustomersAtAddress && result.allCustomersAtAddress.length > 0 && (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <User className=\"h-4 w-4 text-primary\" />\n              <p className=\"text-sm font-medium\">\n                {t('results.allCustomersAtAddress')} ({result.allCustomersAtAddress.length})\n              </p>\n            </div>\n            {result.allCustomersAtAddress.map((customer, index) => (\n              <div\n                key={index}\n                className=\"flex items-center gap-3 p-3 rounded-lg border bg-card hover-elevate\"\n                data-testid={`row-address-customer-${index}`}\n              >\n                <div className=\"h-9 w-9 rounded-full bg-muted flex items-center justify-center flex-shrink-0\">\n                  <User className=\"h-4 w-4 text-muted-foreground\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"font-medium overflow-x-auto whitespace-nowrap\" data-testid={`text-address-customer-name-${index}`}>\n                    {customer.name}\n                  </p>\n                  {(customer.street || customer.houseNumber || customer.postalCode) && (\n                    <p className=\"text-xs text-muted-foreground overflow-x-auto whitespace-nowrap\">\n                      {[customer.street, customer.houseNumber, customer.postalCode]\n                        .filter(Boolean)\n                        .join(' ')}\n                    </p>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Show duplicate names - only if duplicates exist */}\n        {(() => {\n          // Detect duplicates\n          const nameCounts = new Map<string, number>();\n          const duplicates: string[] = [];\n          \n          result.residentNames.forEach(name => {\n            const lowerName = name.toLowerCase();\n            const count = (nameCounts.get(lowerName) || 0) + 1;\n            nameCounts.set(lowerName, count);\n            \n            // Only add to duplicates list if this is exactly the second occurrence\n            if (count === 2) {\n              duplicates.push(name);\n            }\n          });\n          \n          if (duplicates.length === 0) return null;\n          \n          return (\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-2\">\n                <AlertCircle className=\"h-4 w-4 text-blue-500\" />\n                <p className=\"text-sm font-medium\">\n                  {t('results.duplicateNames', 'Duplicate Names')} ({duplicates.length})\n                </p>\n              </div>\n              {duplicates.map((duplicate, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center gap-3 p-3 rounded-lg border bg-card hover-elevate\"\n                  data-testid={`row-duplicate-${index}`}\n                >\n                  <div className=\"h-9 w-9 rounded-full bg-blue-500/10 flex items-center justify-center flex-shrink-0\">\n                    <User className=\"h-4 w-4 text-blue-500\" />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"font-medium overflow-x-auto whitespace-nowrap\" data-testid={`text-duplicate-name-${index}`}>\n                      {duplicate}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          );\n        })()}\n\n        {/* Show prospects - always show when image overlays are present */}\n        {showImageOverlays && result.newProspects.length > 0 && (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <UserPlus className=\"h-4 w-4 text-warning\" />\n              <p className=\"text-sm font-medium\">\n                {t('results.newProspects')} ({result.newProspects.length})\n              </p>\n            </div>\n            {result.newProspects.map((prospect, index) => (\n              <div\n                key={index}\n                className=\"flex items-center gap-3 p-3 rounded-lg border bg-card hover-elevate\"\n                data-testid={`row-prospect-${index}`}\n              >\n                <div className=\"h-9 w-9 rounded-full bg-warning/10 flex items-center justify-center flex-shrink-0\">\n                  <User className=\"h-4 w-4 text-warning\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <span className=\"font-medium overflow-x-auto whitespace-nowrap\" data-testid={`text-prospect-name-${index}`}>\n                    {prospect}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Show existing customers (matched from photo) */}\n        {matchedNames.length > 0 && (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <UserCheck className=\"h-4 w-4 text-success\" />\n              <p className=\"text-sm font-medium\">\n                {t('results.existingCustomers')} ({matchedNames.length})\n              </p>\n            </div>\n            {matchedNames.map((item, index) => (\n              <div\n                key={index}\n                className=\"flex items-center gap-3 p-3 rounded-lg border bg-card hover-elevate\"\n                data-testid={`row-existing-${index}`}\n              >\n                <div className=\"h-9 w-9 rounded-full bg-success/10 flex items-center justify-center flex-shrink-0\">\n                  <User className=\"h-4 w-4 text-success\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"font-medium overflow-x-auto whitespace-nowrap\" data-testid={`text-customer-name-${index}`}>\n                    {item.name}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Show prospects if no image overlays (address-only search) */}\n        {!showImageOverlays && result.newProspects.length > 0 && (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <UserPlus className=\"h-4 w-4 text-warning\" />\n              <p className=\"text-sm font-medium\">\n                {t('results.newProspects')} ({result.newProspects.length})\n              </p>\n            </div>\n            {result.newProspects.map((prospect, index) => (\n              <div\n                key={index}\n                className=\"flex items-center gap-3 p-3 rounded-lg border bg-card hover-elevate\"\n                data-testid={`row-prospect-${index}`}\n              >\n                <div className=\"h-9 w-9 rounded-full bg-warning/10 flex items-center justify-center flex-shrink-0\">\n                  <User className=\"h-4 w-4 text-warning\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <span className=\"font-medium overflow-x-auto whitespace-nowrap\" data-testid={`text-prospect-name-${index}`}>\n                    {prospect}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n    </>\n  );\n}\n","size_bytes":10953},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/scanner.tsx":{"content":"import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport GPSAddressForm, { type Address } from '@/components/GPSAddressForm';\nimport PhotoCapture from '@/components/PhotoCapture';\nimport ResultsDisplay, { type OCRResult } from '@/components/ResultsDisplay';\nimport OCRCorrection from '@/components/OCRCorrection';\nimport LanguageToggle from '@/components/LanguageToggle';\nimport { Button } from '@/components/ui/button';\nimport { RotateCcw, Edit } from 'lucide-react';\n\nexport default function ScannerPage() {\n  const { t } = useTranslation();\n  const [address, setAddress] = useState<Address | null>(null);\n  const [ocrResult, setOcrResult] = useState<OCRResult | null>(null);\n  const [showCorrection, setShowCorrection] = useState(false);\n  const [photoImageSrc, setPhotoImageSrc] = useState<string | null>(null);\n\n  const handlePhotoProcessed = (result: any, imageSrc?: string) => {\n    console.log('OCR result:', result);\n    \n    if (result.residentNames !== undefined) {\n      setOcrResult({\n        residentNames: result.residentNames,\n        existingCustomers: result.existingCustomers || [],\n        newProspects: result.newProspects || [],\n        allCustomersAtAddress: result.allCustomersAtAddress || [],\n        fullVisionResponse: result.fullVisionResponse,\n      });\n      if (imageSrc) {\n        setPhotoImageSrc(imageSrc);\n      }\n      setShowCorrection(false);\n    }\n  };\n\n  const handleAddressDetected = (detectedAddress: Address) => {\n    console.log('Address detected:', detectedAddress);\n    setAddress(detectedAddress);\n  };\n\n  const handleAddressSearch = (customers: any[]) => {\n    console.log('Address search result:', customers);\n    \n    // Show results as existing customers (since all customers at an address are existing)\n    // For address-only search, don't show allCustomersAtAddress section (would be redundant)\n    setOcrResult({\n      residentNames: [],\n      existingCustomers: customers,\n      newProspects: [],\n    });\n    setShowCorrection(false);\n  };\n\n  const handleCorrectionComplete = (result: any) => {\n    console.log('Correction result:', result);\n    \n    if (result.residentNames !== undefined) {\n      setOcrResult({\n        residentNames: result.residentNames,\n        existingCustomers: result.existingCustomers || [],\n        newProspects: result.newProspects || [],\n        allCustomersAtAddress: result.allCustomersAtAddress || [],\n        fullVisionResponse: ocrResult?.fullVisionResponse,\n      });\n      setShowCorrection(false);\n    }\n  };\n\n  const handleReset = () => {\n    setOcrResult(null);\n    setShowCorrection(false);\n    setPhotoImageSrc(null);\n  };\n\n  const handleNamesUpdated = async (updatedNames: string[]) => {\n    if (!address) return;\n\n    try {\n      const response = await fetch('/api/ocr-correct', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          residentNames: updatedNames,\n          address,\n        }),\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        setOcrResult({\n          residentNames: result.residentNames,\n          existingCustomers: result.existingCustomers || [],\n          newProspects: result.newProspects || [],\n          allCustomersAtAddress: result.allCustomersAtAddress || [],\n          fullVisionResponse: ocrResult?.fullVisionResponse,\n        });\n      } else {\n        // Show error toast if update fails\n        const { toast } = await import('@/hooks/use-toast');\n        toast({\n          variant: 'destructive',\n          title: t('photo.error'),\n          description: t('photo.updateFailed'),\n        });\n      }\n    } catch (error) {\n      console.error('Update error:', error);\n      const { toast } = await import('@/hooks/use-toast');\n      toast({\n        variant: 'destructive',\n        title: t('photo.error'),\n        description: t('photo.updateFailed'),\n      });\n    }\n  };\n\n  const handleCorrect = () => {\n    setShowCorrection(true);\n  };\n\n  const hasResults = ocrResult && (ocrResult.existingCustomers.length > 0 || ocrResult.newProspects.length > 0);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"sticky top-0 z-50 bg-background border-b\">\n        <div className=\"container mx-auto px-4 py-3 flex items-center justify-between\">\n          <h1 className=\"text-xl font-bold\" data-testid=\"text-app-title\">\n            {t('app.title')}\n          </h1>\n          <LanguageToggle />\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-4 space-y-4 pb-24\">\n        <GPSAddressForm \n          onAddressDetected={handleAddressDetected}\n          onAddressSearch={handleAddressSearch}\n        />\n        <PhotoCapture onPhotoProcessed={handlePhotoProcessed} address={address} />\n        \n        {showCorrection ? (\n          <OCRCorrection \n            initialNames={ocrResult?.residentNames || []}\n            address={address}\n            onCorrectionComplete={handleCorrectionComplete}\n            onCancel={() => setShowCorrection(false)}\n          />\n        ) : (\n          <ResultsDisplay \n            result={ocrResult} \n            photoImageSrc={photoImageSrc}\n            address={address}\n            onNamesUpdated={handleNamesUpdated}\n          />\n        )}\n      </main>\n\n      {hasResults && !showCorrection && (\n        <div className=\"fixed bottom-0 left-0 right-0 p-4 bg-background border-t safe-area-bottom\">\n          <div className=\"container mx-auto flex flex-wrap gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"lg\"\n              onClick={handleReset}\n              className=\"flex-1 min-w-[140px] min-h-12 gap-2\"\n              data-testid=\"button-reset\"\n            >\n              <RotateCcw className=\"h-4 w-4\" />\n              {t('action.reset')}\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"lg\"\n              onClick={handleCorrect}\n              className=\"flex-1 min-w-[140px] min-h-12 gap-2\"\n              data-testid=\"button-correct\"\n            >\n              <Edit className=\"h-4 w-4\" />\n              {t('action.correct')}\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6256},"client/src/components/examples/GPSAddressForm.tsx":{"content":"import { I18nextProvider } from 'react-i18next';\nimport i18n from '../../i18n';\nimport GPSAddressForm from '../GPSAddressForm';\n\nexport default function GPSAddressFormExample() {\n  return (\n    <I18nextProvider i18n={i18n}>\n      <GPSAddressForm onAddressDetected={(address) => console.log('Address detected:', address)} />\n    </I18nextProvider>\n  );\n}\n","size_bytes":354},"client/src/components/examples/LanguageToggle.tsx":{"content":"import { I18nextProvider } from 'react-i18next';\nimport i18n from '../../i18n';\nimport LanguageToggle from '../LanguageToggle';\n\nexport default function LanguageToggleExample() {\n  return (\n    <I18nextProvider i18n={i18n}>\n      <LanguageToggle />\n    </I18nextProvider>\n  );\n}\n","size_bytes":279},"client/src/components/examples/PhotoCapture.tsx":{"content":"import { I18nextProvider } from 'react-i18next';\nimport i18n from '../../i18n';\nimport PhotoCapture from '../PhotoCapture';\n\nexport default function PhotoCaptureExample() {\n  return (\n    <I18nextProvider i18n={i18n}>\n      <PhotoCapture onPhotoProcessed={(result) => console.log('Photo processed:', result)} />\n    </I18nextProvider>\n  );\n}\n","size_bytes":342},"client/src/components/examples/ResultsDisplay.tsx":{"content":"import { I18nextProvider } from 'react-i18next';\nimport i18n from '../../i18n';\nimport ResultsDisplay from '../ResultsDisplay';\n\nexport default function ResultsDisplayExample() {\n  const mockResults = [\n    { name: 'Max Müller', isExisting: true },\n    { name: 'Anna Schmidt', isExisting: false },\n    { name: 'Thomas Weber', isExisting: true },\n  ];\n\n  return (\n    <I18nextProvider i18n={i18n}>\n      <ResultsDisplay results={mockResults} />\n    </I18nextProvider>\n  );\n}\n","size_bytes":475},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/examples/scanner.tsx":{"content":"import { I18nextProvider } from 'react-i18next';\nimport i18n from '../../i18n';\nimport ScannerPage from '../scanner';\n\nexport default function ScannerPageExample() {\n  return (\n    <I18nextProvider i18n={i18n}>\n      <ScannerPage />\n    </I18nextProvider>\n  );\n}\n","size_bytes":263},"client/src/components/ImageWithOverlays.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { X, Check } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport type { Address } from '@/components/GPSAddressForm';\nimport type { Customer } from '@/components/ResultsDisplay';\n\ninterface BoundingBox {\n  vertices: Array<{ x?: number; y?: number }>;\n}\n\ninterface TextAnnotation {\n  description: string;\n  boundingPoly: BoundingBox;\n}\n\ninterface OverlayBox {\n  text: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  isExisting: boolean;\n  isDuplicate?: boolean;\n  scale: number;\n  originalIndex: number;\n  matchedCustomer?: Customer;\n  xOffset?: number;\n  yOffset?: number;\n  fontSize?: number;\n  isEdited?: boolean; // Track if this overlay was manually edited\n  editedText?: string; // Store the edited text separately\n}\n\ninterface ImageWithOverlaysProps {\n  imageSrc: string;\n  fullVisionResponse?: any;\n  residentNames: string[];\n  existingCustomers: Customer[];\n  newProspects: string[];\n  allCustomersAtAddress?: Customer[];\n  address?: Address | null;\n  onNamesUpdated?: (updatedNames: string[]) => void;\n}\n\nexport default function ImageWithOverlays({\n  imageSrc,\n  fullVisionResponse,\n  residentNames,\n  existingCustomers,\n  newProspects,\n  allCustomersAtAddress,\n  address,\n  onNamesUpdated,\n}: ImageWithOverlaysProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [overlays, setOverlays] = useState<OverlayBox[]>([]);\n  const [editingIndex, setEditingIndex] = useState<number | null>(null);\n  const [editValue, setEditValue] = useState('');\n  const [longPressIndex, setLongPressIndex] = useState<number | null>(null);\n  const [imageDimensions, setImageDimensions] = useState({ width: 0, height: 0 });\n  const [originalDimensions, setOriginalDimensions] = useState({ width: 0, height: 0 });\n  const [windowWidth, setWindowWidth] = useState(typeof window !== 'undefined' ? window.innerWidth : 1200);\n  const imageRef = useRef<HTMLImageElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const longPressTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const textRefs = useRef<Map<number, HTMLSpanElement>>(new Map());\n\n  // Track window width for responsive edit modal\n  useEffect(() => {\n    const handleResize = () => setWindowWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // Calculate overlays when data changes\n  useEffect(() => {\n    if (!fullVisionResponse?.textAnnotations || residentNames.length === 0) {\n      setOverlays([]);\n      return;\n    }\n\n    const textAnnotations: TextAnnotation[] = fullVisionResponse.textAnnotations;\n    \n    // For each resident name, find ALL matching annotations and merge bounding boxes\n    type ResidentMatch = {\n      residentIndex: number;\n      residentName: string;\n      annotations: TextAnnotation[];\n      totalMatchScore: number;\n    };\n    \n    const residentMatches: ResidentMatch[] = [];\n    const usedAnnotations = new Set<number>();\n\n    // Sort residents by word count (more words first), then by length (longer first)\n    // This ensures multi-word names like \"von brandt\" are processed before \"brandt\"\n    const sortedResidents = residentNames.map((name, idx) => ({ \n      name, \n      originalIndex: idx,\n      wordCount: name.split(/\\s+/).length \n    }))\n      .sort((a, b) => {\n        if (b.wordCount !== a.wordCount) return b.wordCount - a.wordCount;\n        return b.name.length - a.name.length;\n      });\n\n    // Process each resident name (longer names first)\n    sortedResidents.forEach(({ name: residentName, originalIndex: nameIndex }) => {\n      const nameWords = residentName.toLowerCase().split(/\\s+/);\n      const matchingAnnotations: TextAnnotation[] = [];\n      const matchedIndices: number[] = [];\n      let totalScore = 0;\n\n      // Skip first annotation (full text), process individual text blocks\n      for (let i = 1; i < textAnnotations.length; i++) {\n        if (usedAnnotations.has(i)) continue; // Skip if already used\n        \n        const annotation = textAnnotations[i];\n        const text = annotation.description?.toLowerCase().replace(/[-\\.\\/\\\\|]/g, ' ').replace(/\\s+/g, ' ').trim();\n        \n        if (!text) continue;\n        const annotationWords = text.split(/\\s+/);\n\n        // For single-word names, only match if annotation is EXACTLY that word\n        // Only take the FIRST match to prevent oversized boxes from multiple detections\n        if (nameWords.length === 1) {\n          const singleWord = nameWords[0];\n          if (annotationWords.length === 1 && annotationWords[0] === singleWord && matchingAnnotations.length === 0) {\n            matchingAnnotations.push(annotation);\n            matchedIndices.push(i);\n            totalScore += 1;\n          }\n        } else {\n          // For multi-word names, check if ANY word from the name matches this annotation\n          const matchingWords = nameWords.filter(word => annotationWords.includes(word));\n          \n          if (matchingWords.length > 0) {\n            matchingAnnotations.push(annotation);\n            matchedIndices.push(i);\n            totalScore += matchingWords.length;\n          }\n        }\n      }\n\n      if (matchingAnnotations.length > 0) {\n        residentMatches.push({\n          residentIndex: nameIndex,\n          residentName,\n          annotations: matchingAnnotations,\n          totalMatchScore: totalScore,\n        });\n        \n        // Mark all matched annotations as used\n        matchedIndices.forEach(idx => usedAnnotations.add(idx));\n      }\n    });\n\n    // Normalize name to extract words (remove periods, split on spaces/hyphens/slashes)\n    const normalizeToWords = (name: string): string[] => {\n      return name\n        .toLowerCase()\n        .replace(/\\./g, '') // Remove periods (e.g., \"L.\" -> \"L\")\n        .split(/[\\s\\-\\/]+/) // Split on spaces, hyphens, slashes\n        .filter(word => word.length > 1); // Ignore single characters\n    };\n\n    // Build word-to-names mapping to find names sharing common words\n    const wordToNames = new Map<string, Set<string>>();\n    residentNames.forEach(name => {\n      const words = normalizeToWords(name);\n      words.forEach(word => {\n        if (!wordToNames.has(word)) {\n          wordToNames.set(word, new Set());\n        }\n        wordToNames.get(word)!.add(name.toLowerCase());\n      });\n    });\n\n    // Find names that share words - these are duplicates\n    const duplicateNames = new Set<string>();\n    wordToNames.forEach((names, word) => {\n      if (names.size > 1) {\n        // This word appears in multiple names - all those names are duplicates\n        names.forEach(name => duplicateNames.add(name));\n      }\n    });\n    \n    // Track which resident indices have been used to create overlays\n    const usedResidentIndices = new Set<number>();\n    \n    // Create overlays with merged bounding boxes for multi-part names\n    const newOverlays: OverlayBox[] = [];\n    \n    residentMatches.forEach(match => {\n      const isDuplicate = duplicateNames.has(match.residentName.toLowerCase());\n      const isExisting = !newProspects.includes(match.residentName);\n      const matchedCustomer = isExisting \n        ? existingCustomers.find(c => c.name.toLowerCase() === match.residentName.toLowerCase())\n        : undefined;\n\n      // Collect all vertices from all matching annotations\n      const allVertices: Array<{ x: number; y: number }> = [];\n      match.annotations.forEach(annotation => {\n        if (annotation.boundingPoly?.vertices) {\n          annotation.boundingPoly.vertices.forEach(v => {\n            allVertices.push({ x: v.x || 0, y: v.y || 0 });\n          });\n        }\n      });\n\n      if (allVertices.length >= 3) {\n        const xs = allVertices.map(v => v.x);\n        const ys = allVertices.map(v => v.y);\n        \n        const minX = Math.min(...xs);\n        const minY = Math.min(...ys);\n        const maxX = Math.max(...xs);\n        const maxY = Math.max(...ys);\n\n        // Add conservative padding (5% instead of 10% to avoid edge issues)\n        const baseWidth = maxX - minX;\n        const baseHeight = maxY - minY;\n        const padding = Math.min(\n          Math.max(baseWidth * 0.05, baseHeight * 0.05),\n          10 // Cap padding at 10px to avoid extending too far\n        );\n        \n        // Create overlay for this match's resident index\n        newOverlays.push({\n          text: match.residentName,\n          x: Math.max(0, minX - padding),\n          y: Math.max(0, minY - padding),\n          width: baseWidth + (padding * 2),\n          height: baseHeight + (padding * 2),\n          isExisting,\n          isDuplicate,\n          scale: 1,\n          originalIndex: match.residentIndex,\n          matchedCustomer,\n        });\n        usedResidentIndices.add(match.residentIndex);\n      }\n    });\n    \n    // For duplicate names where some occurrences didn't get matched to an annotation,\n    // create overlays at the same location as the first matched occurrence\n    if (newOverlays.length > 0) {\n      residentNames.forEach((name, idx) => {\n        if (usedResidentIndices.has(idx)) return; // Already has overlay\n        \n        const lowerName = name.toLowerCase();\n        const isDuplicate = duplicateNames.has(lowerName);\n        \n        if (isDuplicate) {\n          // This is a duplicate that didn't get matched - find an overlay that shares a word with this name\n          const nameWords = normalizeToWords(name);\n          const matchedOverlay = newOverlays.find(overlay => {\n            const overlayWords = normalizeToWords(overlay.text);\n            return nameWords.some(word => overlayWords.includes(word));\n          });\n          \n          if (matchedOverlay) {\n            const isExisting = !newProspects.includes(name);\n            const matchedCustomer = isExisting \n              ? existingCustomers.find(c => c.name.toLowerCase() === lowerName)\n              : undefined;\n            \n            newOverlays.push({\n              text: name,\n              x: matchedOverlay.x,\n              y: matchedOverlay.y,\n              width: matchedOverlay.width,\n              height: matchedOverlay.height,\n              isExisting,\n              isDuplicate: true,\n              scale: 1,\n              originalIndex: idx,\n              matchedCustomer,\n            });\n          }\n        }\n      });\n    }\n\n    // Preserve edited overlays - merge them with new overlays using stable identifier\n    setOverlays(prevOverlays => {\n      const editedOverlays = prevOverlays.filter(o => o.isEdited);\n      const processedNewOverlays = handleOverlaps(newOverlays);\n      \n      // Recalculate duplicate status and existing/prospect status for edited overlays\n      // Use the same word-based duplicate detection logic\n      const currentWordToNames = new Map<string, Set<string>>();\n      residentNames.forEach(name => {\n        const words = normalizeToWords(name);\n        words.forEach(word => {\n          if (!currentWordToNames.has(word)) {\n            currentWordToNames.set(word, new Set());\n          }\n          currentWordToNames.get(word)!.add(name.toLowerCase());\n        });\n      });\n      \n      const currentDuplicateNames = new Set<string>();\n      currentWordToNames.forEach((names, word) => {\n        if (names.size > 1) {\n          names.forEach(name => currentDuplicateNames.add(name));\n        }\n      });\n      \n      const updatedEditedOverlays = editedOverlays.map(edited => {\n        const editedName = edited.editedText || edited.text;\n        const isDuplicate = currentDuplicateNames.has(editedName.toLowerCase());\n        const isExisting = !newProspects.includes(editedName);\n        const matchedCustomer = isExisting \n          ? existingCustomers.find(c => c.name.toLowerCase() === editedName.toLowerCase())\n          : undefined;\n        return { ...edited, isDuplicate, isExisting, matchedCustomer };\n      });\n      \n      // Create a map of edited overlays by their originalIndex (stable identifier)\n      const editedByIndex = new Map<number, OverlayBox>();\n      updatedEditedOverlays.forEach(edited => {\n        editedByIndex.set(edited.originalIndex, edited);\n      });\n      \n      // Merge: use edited version if exists for this originalIndex, otherwise use new overlay\n      const merged: OverlayBox[] = [];\n      processedNewOverlays.forEach(newOverlay => {\n        const editedVersion = editedByIndex.get(newOverlay.originalIndex);\n        if (editedVersion) {\n          // Use edited version but update bounding box from new overlay (in case of resize)\n          merged.push({\n            ...editedVersion,\n            x: newOverlay.x,\n            y: newOverlay.y,\n            width: newOverlay.width,\n            height: newOverlay.height,\n            scale: newOverlay.scale,\n            xOffset: newOverlay.xOffset,\n            yOffset: newOverlay.yOffset,\n            // Use recalculated status from edited version (not newOverlay)\n            isExisting: editedVersion.isExisting,\n            isDuplicate: editedVersion.isDuplicate,\n            matchedCustomer: editedVersion.matchedCustomer,\n          });\n          editedByIndex.delete(newOverlay.originalIndex); // Mark as used\n        } else {\n          merged.push(newOverlay);\n        }\n      });\n      \n      // Add any remaining edited overlays that don't have a new match\n      // (This preserves edits even if the overlay no longer matches OCR)\n      editedByIndex.forEach(edited => {\n        merged.push(edited);\n      });\n      \n      return merged;\n    });\n  }, [fullVisionResponse, residentNames, existingCustomers, newProspects]);\n\n  // Calculate optimal font size for text to fit in box without truncation\n  const calculateFontSize = (text: string, boxWidth: number, boxHeight: number): number => {\n    // Start with base font size in pixels\n    let fontSize = 12;\n    const minFontSize = 6;\n    \n    // Account for border (1px each side) and padding (1px each side) = 4px total\n    const availableWidth = boxWidth - 4;\n    const availableHeight = boxHeight - 4;\n    \n    // Conservative character width ratio\n    const avgCharWidthRatio = 0.65;\n    \n    // Calculate required width for text\n    const textLength = text.length;\n    \n    // Find optimal font size by reducing until it fits\n    while (fontSize > minFontSize) {\n      const estimatedWidth = textLength * fontSize * avgCharWidthRatio;\n      const estimatedHeight = fontSize * 1.2; // line height\n      \n      if (estimatedWidth <= availableWidth && estimatedHeight <= availableHeight) {\n        break;\n      }\n      fontSize -= 0.5;\n    }\n    \n    return Math.max(fontSize, minFontSize);\n  };\n\n  // Handle overlapping boxes by downscaling and offsetting\n  const handleOverlaps = (boxes: OverlayBox[]): OverlayBox[] => {\n    const result = boxes.map(box => ({ ...box, xOffset: 0, yOffset: 0 }));\n    let iterations = 0;\n    const maxIterations = 10;\n\n    while (iterations < maxIterations) {\n      let hasOverlap = false;\n      iterations++;\n\n      for (let i = 0; i < result.length; i++) {\n        for (let j = i + 1; j < result.length; j++) {\n          const box1 = result[i];\n          const box2 = result[j];\n\n          // Calculate scaled dimensions and positions\n          const b1x = box1.x + (box1.xOffset || 0);\n          const b1y = box1.y + (box1.yOffset || 0);\n          const b1w = box1.width * box1.scale;\n          const b1h = box1.height * box1.scale;\n          \n          const b2x = box2.x + (box2.xOffset || 0);\n          const b2y = box2.y + (box2.yOffset || 0);\n          const b2w = box2.width * box2.scale;\n          const b2h = box2.height * box2.scale;\n\n          // Check for overlap using scaled dimensions\n          const overlap = !(\n            b1x + b1w <= b2x ||\n            b2x + b2w <= b1x ||\n            b1y + b1h <= b2y ||\n            b2y + b2h <= b1y\n          );\n\n          if (overlap) {\n            hasOverlap = true;\n            \n            // Calculate overlap amounts\n            const overlapX = Math.min(b1x + b1w, b2x + b2w) - Math.max(b1x, b2x);\n            const overlapY = Math.min(b1y + b1h, b2y + b2h) - Math.max(b1y, b2y);\n            \n            // If boxes are heavily overlapped (>70% in both directions), use offsets\n            if (overlapX > Math.min(b1w, b2w) * 0.7 && overlapY > Math.min(b1h, b2h) * 0.7) {\n              // Boxes are very overlapped, offset them vertically apart\n              const offsetAmount = Math.max(5, Math.min(b1h, b2h) * 0.1);\n              result[i] = { ...box1, yOffset: (box1.yOffset || 0) - offsetAmount };\n              result[j] = { ...box2, yOffset: (box2.yOffset || 0) + offsetAmount };\n            } else {\n              // Scale down each box independently from its own center\n              const newScale1 = box1.scale * 0.9;\n              const oldWidth1 = box1.width * box1.scale;\n              const oldHeight1 = box1.height * box1.scale;\n              const newWidth1 = box1.width * newScale1;\n              const newHeight1 = box1.height * newScale1;\n              const centerOffsetX1 = (oldWidth1 - newWidth1) / 2;\n              const centerOffsetY1 = (oldHeight1 - newHeight1) / 2;\n              \n              result[i] = { \n                ...box1, \n                scale: newScale1,\n                xOffset: (box1.xOffset || 0) + centerOffsetX1,\n                yOffset: (box1.yOffset || 0) + centerOffsetY1\n              };\n              \n              const newScale2 = box2.scale * 0.9;\n              const oldWidth2 = box2.width * box2.scale;\n              const oldHeight2 = box2.height * box2.scale;\n              const newWidth2 = box2.width * newScale2;\n              const newHeight2 = box2.height * newScale2;\n              const centerOffsetX2 = (oldWidth2 - newWidth2) / 2;\n              const centerOffsetY2 = (oldHeight2 - newHeight2) / 2;\n              \n              result[j] = { \n                ...box2, \n                scale: newScale2,\n                xOffset: (box2.xOffset || 0) + centerOffsetX2,\n                yOffset: (box2.yOffset || 0) + centerOffsetY2\n              };\n            }\n          }\n        }\n      }\n      \n      // If no overlap found in this iteration, we're done\n      if (!hasOverlap) break;\n    }\n\n    return result;\n  };\n\n  // Update dimensions when image loads or window resizes\n  const updateDimensions = () => {\n    if (imageRef.current) {\n      setImageDimensions({\n        width: imageRef.current.offsetWidth,\n        height: imageRef.current.offsetHeight,\n      });\n      setOriginalDimensions({\n        width: imageRef.current.naturalWidth,\n        height: imageRef.current.naturalHeight,\n      });\n    }\n  };\n\n  useEffect(() => {\n    updateDimensions();\n    window.addEventListener('resize', updateDimensions);\n    return () => window.removeEventListener('resize', updateDimensions);\n  }, []);\n\n  // Calculate scale factor\n  const scaleX = imageDimensions.width / (originalDimensions.width || 1);\n  const scaleY = imageDimensions.height / (originalDimensions.height || 1);\n\n  // Handle click to edit\n  const handleOverlayClick = (index: number) => {\n    if (longPressTimerRef.current) {\n      clearTimeout(longPressTimerRef.current);\n      longPressTimerRef.current = null;\n    }\n    setLongPressIndex(null);\n    setEditingIndex(index);\n    setEditValue(overlays[index].text);\n  };\n\n  // Handle long press start\n  const handleLongPressStart = (index: number, e: React.MouseEvent | React.TouchEvent) => {\n    e.preventDefault();\n    longPressTimerRef.current = setTimeout(() => {\n      setLongPressIndex(index);\n      longPressTimerRef.current = null;\n    }, 500);\n  };\n\n  // Handle long press end\n  const handleLongPressEnd = () => {\n    if (longPressTimerRef.current) {\n      clearTimeout(longPressTimerRef.current);\n      longPressTimerRef.current = null;\n    }\n  };\n\n  // Save edited name\n  const saveEdit = () => {\n    if (editingIndex === null || !editValue.trim()) return;\n\n    const updatedNames = [...residentNames];\n    const originalIndex = overlays[editingIndex].originalIndex;\n    updatedNames[originalIndex] = editValue.trim().toLowerCase();\n\n    // Mark this overlay as edited so it persists\n    setOverlays(prev => prev.map((overlay, idx) => \n      idx === editingIndex \n        ? { ...overlay, isEdited: true, editedText: editValue.trim().toLowerCase(), text: editValue.trim().toLowerCase() }\n        : overlay\n    ));\n\n    // Notify parent component which will handle the API call\n    onNamesUpdated?.(updatedNames);\n    \n    toast({\n      title: t('photo.success'),\n      description: t('photo.nameUpdated'),\n    });\n\n    setEditingIndex(null);\n  };\n\n  // Cancel edit\n  const cancelEdit = () => {\n    setEditingIndex(null);\n    setEditValue('');\n  };\n\n  if (!imageSrc || overlays.length === 0) {\n    return null;\n  }\n\n  // Calculate which types of overlays are present\n  const hasProspects = overlays.some(o => !o.isExisting && !o.isDuplicate);\n  const hasExisting = overlays.some(o => o.isExisting && !o.isDuplicate);\n  const hasDuplicates = overlays.some(o => o.isDuplicate);\n\n  return (\n    <Card data-testid=\"card-image-overlays\">\n      <CardContent className=\"p-0\">\n        {/* Legend */}\n        {(hasProspects || hasExisting || hasDuplicates) && (\n          <div className=\"flex items-center gap-4 px-4 py-2 text-sm border-b\">\n            {hasProspects && (\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: 'rgba(251, 146, 60, 1)' }} />\n                <span>{t('photo.legend.prospects', 'Prospects')}</span>\n              </div>\n            )}\n            {hasExisting && (\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: 'rgba(34, 197, 94, 1)' }} />\n                <span>{t('photo.legend.existing', 'Existing Customers')}</span>\n              </div>\n            )}\n            {hasDuplicates && (\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: 'rgba(59, 130, 246, 1)' }} />\n                <span>{t('photo.legend.duplicates', 'Duplicates')}</span>\n              </div>\n            )}\n          </div>\n        )}\n        \n        <div ref={containerRef} className=\"relative w-full\" style={{ touchAction: 'auto' }}>\n          <img\n            ref={imageRef}\n            src={imageSrc}\n            alt=\"Nameplate with overlays\"\n            className=\"w-full h-auto\"\n            onLoad={updateDimensions}\n            data-testid=\"img-with-overlays\"\n          />\n          \n          {overlays.map((overlay, index) => {\n            const isEditing = editingIndex === index;\n            const isShowingDetails = longPressIndex === index;\n            const scaledX = (overlay.x + (overlay.xOffset || 0)) * scaleX;\n            const scaledY = (overlay.y + (overlay.yOffset || 0)) * scaleY;\n            const scaledWidth = overlay.width * scaleX * overlay.scale;\n            const scaledHeight = overlay.height * scaleY * overlay.scale;\n            \n            // Calculate optimal font size for this overlay\n            // Text area extends 8px on each side (16px total) for better visibility\n            const optimalFontSize = calculateFontSize(overlay.text, scaledWidth + 16, scaledHeight);\n\n            return (\n              <div\n                key={index}\n                className=\"absolute cursor-pointer transition-all\"\n                style={{\n                  left: `${scaledX}px`,\n                  top: `${scaledY}px`,\n                  width: `${scaledWidth}px`,\n                  height: `${scaledHeight}px`,\n                }}\n                onClick={(e) => {\n                  if (!isEditing) handleOverlayClick(index);\n                }}\n                onMouseDown={(e) => handleLongPressStart(index, e)}\n                onMouseUp={handleLongPressEnd}\n                onMouseLeave={handleLongPressEnd}\n                onTouchStart={(e) => {\n                  handleLongPressStart(index, e);\n                }}\n                onTouchEnd={(e) => {\n                  handleLongPressEnd();\n                }}\n                data-testid={`overlay-box-${index}`}\n                data-is-duplicate={overlay.isDuplicate ? 'true' : 'false'}\n                data-is-existing={overlay.isExisting ? 'true' : 'false'}\n              >\n                {/* Background box with rounded corners and border */}\n                <div\n                  className=\"absolute inset-0 rounded\"\n                  style={{\n                    backgroundColor: overlay.isDuplicate\n                      ? 'rgba(59, 130, 246, 0.3)'  // Blue with 30% opacity (duplicates)\n                      : overlay.isExisting \n                      ? 'rgba(34, 197, 94, 0.3)'  // Green with 30% opacity (existing)\n                      : 'rgba(251, 146, 60, 0.3)', // Orange with 30% opacity (prospects)\n                    border: `1px solid ${\n                      overlay.isDuplicate\n                        ? 'rgba(59, 130, 246, 0.8)'  // Blue with 80% opacity (duplicates)\n                        : overlay.isExisting\n                        ? 'rgba(34, 197, 94, 0.8)'  // Green with 80% opacity (existing)\n                        : 'rgba(251, 146, 60, 0.8)'  // Orange with 80% opacity (prospects)\n                    }`,\n                  }}\n                />\n                \n                {/* Text container - extends horizontally to avoid rounded corner clipping */}\n                <div \n                  className=\"absolute inset-0 flex items-center justify-center\"\n                  style={{\n                    left: '-8px',\n                    right: '-8px',\n                    paddingLeft: '8px',\n                    paddingRight: '8px',\n                  }}\n                >\n                  {isEditing && windowWidth >= 1000 ? (\n                    // Desktop inline editing\n                    <div className=\"flex items-center gap-1 w-full\" onClick={(e) => e.stopPropagation()}>\n                      <Input\n                        value={editValue}\n                        onChange={(e) => setEditValue(e.target.value)}\n                        className=\"h-6 text-xs px-1 flex-1 min-w-0\"\n                        autoFocus\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') saveEdit();\n                          if (e.key === 'Escape') cancelEdit();\n                        }}\n                        data-testid={`input-edit-name-${index}`}\n                      />\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"h-6 w-6 flex-shrink-0\"\n                        onClick={saveEdit}\n                        data-testid={`button-save-edit-${index}`}\n                      >\n                        <Check className=\"h-3 w-3\" />\n                      </Button>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"h-6 w-6 flex-shrink-0\"\n                        onClick={cancelEdit}\n                        data-testid={`button-cancel-edit-${index}`}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  ) : (\n                    <span \n                      className=\"text-center leading-tight text-black font-medium\"\n                      style={{\n                        fontSize: `${optimalFontSize}px`,\n                        lineHeight: '1.1',\n                        whiteSpace: 'nowrap',\n                      }}\n                    >\n                      {overlay.text}\n                    </span>\n                  )}\n                </div>\n\n                {/* Long press popup */}\n                {isShowingDetails && overlay.matchedCustomer && (\n                  <div\n                    className=\"absolute z-50 bg-card border rounded-lg shadow-lg p-3 min-w-[200px] pointer-events-none\"\n                    style={{\n                      top: '100%',\n                      left: '50%',\n                      transform: 'translateX(-50%)',\n                      marginTop: '4px',\n                    }}\n                    data-testid={`popup-details-${index}`}\n                  >\n                    <div className=\"space-y-1 text-xs\">\n                      <p className=\"font-semibold\">{overlay.matchedCustomer.name}</p>\n                      {overlay.matchedCustomer.street && (\n                        <p className=\"text-muted-foreground\">\n                          {overlay.matchedCustomer.street} {overlay.matchedCustomer.houseNumber}\n                        </p>\n                      )}\n                      {overlay.matchedCustomer.postalCode && (\n                        <p className=\"text-muted-foreground\">{overlay.matchedCustomer.postalCode}</p>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Mobile Edit Modal - Full screen overlay for screens < 1000px */}\n        {editingIndex !== null && windowWidth < 1000 && (\n          <div \n            className=\"fixed inset-0 z-50 flex items-center justify-center p-4\"\n            style={{ \n              backgroundColor: 'rgba(0, 0, 0, 0.7)',\n              backdropFilter: 'blur(4px)'\n            }}\n            onClick={cancelEdit}\n            data-testid=\"mobile-edit-modal\"\n          >\n            <div \n              className=\"bg-card border-2 rounded-lg p-6 w-full max-w-md shadow-2xl\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <h3 className=\"text-lg font-semibold mb-4 text-center\">\n                {t('photo.editName', 'Edit Name')}\n              </h3>\n              \n              <Input\n                value={editValue}\n                onChange={(e) => setEditValue(e.target.value)}\n                className=\"text-lg h-12 px-4 mb-6\"\n                autoFocus\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter') saveEdit();\n                  if (e.key === 'Escape') cancelEdit();\n                }}\n                data-testid=\"input-mobile-edit-name\"\n              />\n              \n              <div className=\"flex gap-3 justify-center\">\n                <Button\n                  onClick={cancelEdit}\n                  variant=\"destructive\"\n                  size=\"lg\"\n                  className=\"flex-1 h-12 text-base gap-2\"\n                  data-testid=\"button-mobile-cancel-edit\"\n                >\n                  <X className=\"h-5 w-5\" />\n                  {t('correction.cancel', 'Abbrechen')}\n                </Button>\n                <Button\n                  onClick={saveEdit}\n                  variant=\"default\"\n                  size=\"lg\"\n                  className=\"flex-1 h-12 text-base gap-2 bg-success hover:bg-success/90 border-success\"\n                  data-testid=\"button-mobile-save-edit\"\n                >\n                  <Check className=\"h-5 w-5\" />\n                  {t('action.save', 'Speichern')}\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":31489},"client/src/components/OCRCorrection.tsx":{"content":"import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Check, X, Plus, Trash2, Loader2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport type { Address } from '@/components/GPSAddressForm';\n\ninterface OCRCorrectionProps {\n  initialNames: string[];\n  address?: Address | null;\n  onCorrectionComplete?: (results: any) => void;\n  onCancel?: () => void;\n}\n\nexport default function OCRCorrection({ \n  initialNames, \n  address, \n  onCorrectionComplete,\n  onCancel \n}: OCRCorrectionProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [names, setNames] = useState<string[]>(initialNames.length > 0 ? initialNames : ['']);\n  const [processing, setProcessing] = useState(false);\n\n  const updateName = (index: number, value: string) => {\n    const updated = [...names];\n    updated[index] = value;\n    setNames(updated);\n  };\n\n  const addName = () => {\n    setNames([...names, '']);\n  };\n\n  const removeName = (index: number) => {\n    if (names.length > 1) {\n      setNames(names.filter((_, i) => i !== index));\n    }\n  };\n\n  const handleSubmit = async () => {\n    const validNames = names.filter(name => name.trim().length > 0);\n    \n    if (validNames.length === 0) {\n      toast({\n        variant: 'destructive',\n        title: t('correction.noNames'),\n        description: t('correction.noNamesDesc'),\n      });\n      return;\n    }\n\n    setProcessing(true);\n\n    try {\n      const response = await fetch('/api/ocr-correct', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          residentNames: validNames,\n          address: address || undefined,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('OCR correction failed');\n      }\n\n      const result = await response.json();\n      onCorrectionComplete?.(result);\n      \n      toast({\n        title: t('correction.success'),\n        description: `${t('correction.found')} ${result.existingCustomers?.length || 0} ${t('correction.customers')}`,\n      });\n    } catch (error) {\n      console.error('OCR correction error:', error);\n      toast({\n        variant: 'destructive',\n        title: t('correction.error'),\n        description: t('correction.errorDesc'),\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  return (\n    <Card data-testid=\"card-ocr-correction\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold\">{t('correction.title')}</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <p className=\"text-sm text-muted-foreground\">\n          {t('correction.description')}\n        </p>\n        \n        <div className=\"space-y-3\">\n          {names.map((name, index) => (\n            <div key={index} className=\"flex gap-2\">\n              <div className=\"flex-1\">\n                <Label htmlFor={`name-${index}`} className=\"sr-only\">\n                  {t('correction.nameLabel')} {index + 1}\n                </Label>\n                <Input\n                  id={`name-${index}`}\n                  value={name}\n                  onChange={(e) => updateName(index, e.target.value)}\n                  placeholder={`${t('correction.namePlaceholder')} ${index + 1}`}\n                  className=\"min-h-11\"\n                  data-testid={`input-name-${index}`}\n                />\n              </div>\n              {names.length > 1 && (\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={() => removeName(index)}\n                  data-testid={`button-remove-${index}`}\n                  className=\"min-h-11 min-w-11\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              )}\n            </div>\n          ))}\n        </div>\n\n        <Button\n          variant=\"outline\"\n          onClick={addName}\n          className=\"w-full min-h-11 gap-2\"\n          data-testid=\"button-add-name\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          {t('correction.addName')}\n        </Button>\n\n        <div className=\"flex gap-2 pt-2\">\n          <Button\n            variant=\"outline\"\n            onClick={onCancel}\n            className=\"flex-1 min-h-11 gap-2\"\n            data-testid=\"button-cancel-correction\"\n            disabled={processing}\n          >\n            <X className=\"h-4 w-4\" />\n            {t('correction.cancel')}\n          </Button>\n          <Button\n            onClick={handleSubmit}\n            className=\"flex-1 min-h-11 gap-2\"\n            data-testid=\"button-submit-correction\"\n            disabled={processing}\n          >\n            {processing ? (\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <Check className=\"h-4 w-4\" />\n            )}\n            {processing ? t('correction.processing') : t('correction.submit')}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5215},"replit.md":{"content":"# Sales Acquisition Tool\n\n## Overview\n\nThis mobile-first web application helps energy provider sales representatives capture customer information in the field. It uses GPS to detect addresses and OCR to extract names from nameplate photos, distinguishing between existing customers and potential prospects. The tool is optimized for one-handed mobile operation and offers a streamlined workflow with manual correction capabilities. Its primary purpose is to enhance efficiency in field data capture and lead generation.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\nThe application is built as a mobile-first web application with a focus on a single-screen, intuitive user experience.\n\n### Frontend\n- **Technology Stack**: React 18, TypeScript, Wouter for routing, TanStack React Query for state, Shadcn/ui (Radix UI) for components, Tailwind CSS for styling, i18next for German/English internationalization.\n- **UI/UX Decisions**: Optimized for one-handed mobile use with large touch targets. Features a professional blue primary color, green for existing customers, yellow for prospects, and high-contrast text for outdoor readability. Full dark mode support is included.\n- **Address Form**: Simplified to show only Street (Straße), Number (Nummer), and Postal Code (Postleitzahl) fields. City and Country are handled automatically by GPS detection but are not shown to users.\n\n### Backend\n- **Technology Stack**: Node.js with Express.js, TypeScript.\n- **API Design**: RESTful JSON API with comprehensive error handling.\n- **Key Endpoints**:\n    - `POST /api/geocode`: Converts GPS coordinates to physical addresses using Google Geocoding API. **Validates that addresses are in Germany** (returns 400 for non-German locations).\n    - `POST /api/ocr`: Processes nameplate photos with Google Cloud Vision API for German text extraction, parses names (handling periods, hyphens, and short names/initials), and matches against the customer database.\n    - `POST /api/ocr-correct`: Resubmits manually corrected names for customer lookup.\n    - `POST /api/search-address`: **Address-only search** - searches customer database by address without requiring photo upload. Supports partial street matching with German character normalization (ß/ss) and flexible house number matching.\n    - `GET /api/customers`: Fetches all customers from Google Sheets.\n- **Data Storage**: Google Sheets serves as the primary customer database with a 5-minute in-memory cache. The system is designed with an interface-based storage abstraction for potential migration to PostgreSQL.\n- **Customer Matching Logic**: Employs word-level, case-insensitive matching for names (with period/hyphen normalization to spaces), with optional address filtering (street, house number, postal code) to categorize existing customers versus new prospects.\n- **Germany-Only Service**: Both frontend and backend enforce that this service is only available for German addresses. Frontend displays error message; backend validates and rejects non-German GPS coordinates.\n\n## External Dependencies\n\n1.  **Google Geocoding API**: Used for converting GPS coordinates to structured addresses.\n2.  **Google Cloud Vision API**: Utilized for highly accurate German text extraction from nameplate photos (OCR). Requires a JSON service account key.\n3.  **Google Sheets API**: Integrates with Google Sheets as the customer database, enabling real-time syncing and data storage. Requires a JSON service account key and sharing the sheet with the service account.\n4.  **Radix UI / Shadcn/ui**: Component libraries for building the user interface.\n5.  **Lucide React**: Icon library.\n6.  **Vite**: Frontend bundling.\n7.  **esbuild**: Backend bundling.\n8.  **i18next**: Internationalization library for English and German.","size_bytes":3825}},"version":1}